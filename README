Parsybone (Parameter Synthesizer for Boolean Networks) Release v1.000, 7.10.2012
Copyright (C) 2012 - Adam Streck
Systems Biology Laboratory of Masaryk University, Brno ( http://sybila.fi.muni.cz )
open-source 2012, GNU GPL v3, uses:
	Boost Libraries ( http://www.boost.org/ )
	RapidXML ( see http://rapidxml.sourceforge.net/ )

Contents of the repository:
	main.cpp: source file of the program, 
	test.cpp source for the testing suite
	auxiliary, construction, parsing, synthesis: header files of the program
	test: header files of the testing suite
	sqlite: source of Sqlite3 

	ParsyboneMain, ParsyboneTesting: QTCreator projects

	example_model.dbm: simple example model for usage with the tool

	manual_v_1_0_0_0.pdf: user manual for the program
	reference_v_1_0_0_0.pdf: source code description in the pdf file form
	reference_v_1_0_0_0_HTML: source code description in the form of HTML we pages.

Requirements:
	GCC v4.6.0 or newer on Linux and Mac, MinGW 4.6.0 or newer on the Windows platform
	Boost libraries (only header are required) version 1.47 or newer.
	Sqlite3 (is part of the repository)
	DL library, Pthread library (usually present by default)
	
Building:
	Use the QTCreator or:

	Build Sqlite:
	gcc -c sqlite/sqlite.c
	Build Parsybone:
	g++ -o parsybone main.cpp sqlite.o -ldl -lpthread 
		(if you do not have Boost libraries in the default include directory, then use -I "path to boost version")
	
Execution:
	parsybone model.dbm [-cdfmMrvwW] [--data database_file] [--file text_file]  [--min bitmask_file] [--mout bitmask_file]  [--dist I N]

	model.dbm	name of the file that will be parsed and used, must have .dbm suffix
	model is used as the name of the model further in the program
	
	-c	display computation results on console
	-d	output computation results to an sqlite database
		by default the file is model.sqlite, can be changed using the --data switch
	-f	output computation results to a text file
		by default the file is model.out, can be changed using the --file switch
	-m	use an input mask for parametrization filtering
		by default the file is model.pbm, can be changed using the --min switch
	-M	output parametrizations as a mask
		by default the file is model.pbm, can be changed using the --mout switch
	-r	compute robustness of a time series
	-v 	verbose (output progress to console)
	-w	compute witnesses and store them in encoded form
	-W	compute witnesses and store them in explicit form
	
	--dist	used for distributed computation with two integers, denoting the I-th process out of N. Total - each of those tests only 1/N of the parametrization space.
