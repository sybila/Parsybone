Parsybone (Parameter Synthesizer for Boolean Networks) Development version
Copyright (C) 2012-2013 - Adam Streck

This is a development version and is not intended for use by non-developers!
For the latest release version, see https://github.com/sybila/Parsybone/tree/release .

Discrete Biomathematics, Freie Universitat, Berlin ( http://www.mi.fu-berlin.de/en/math/groups/dibimath )
Systems Biology Laboratory of Masaryk University, Brno ( http://sybila.fi.muni.cz )

open-source 2012-2013, licensed as GNU GPL v3
the repository includes 3rd party code of:
	RapidXML ( see http://rapidxml.sourceforge.net/ )
	sqlite3 (see http://www.sqlite.org/ )
3rd party code is subject to individual licences, for details see the license file in the respective repository.

Contents of the repository:
	main.cpp: source file of the program, 
	test.cpp source for the testing suite
	auxiliary, construction, parsing, synthesis: header files of the program
	test: header files of the testing suite

	ParsyboneMain, ParsyboneTesting: QTCreator projects

	example_model.dbm: simple example model for usage with the tool

	Manual: folder containing source for the manual
	reference_v_1_0_0_0.pdf: source code description in the pdf file form
	reference_v_1_0_0_0_HTML: source code description in the form of HTML we pages.
	
	MiscCode: additional codes that are not directly related to Parsybone

Requirements:
	GCC v4.6.0 or newer on Linux and Mac, MinGW 4.6.0 or newer on the Windows platform
	Boost headers version 1.47 or newer.
	Boost regex library
	Sqlite3 library

	Google test library for the test project
	
Building:
	For building, it is necessary to build and link:
		boost regex 
		sqlite3
	also, Boost headers must be in the include path.
	
Execution:
	parsybone model.dbm [-cdfmMrvwW] [--data database_file] [--file text_file]  [--min bitmask_file] [--mout bitmask_file]  [--dist I N]

	model.dbm	name of the file that will be parsed and used, must have .dbm suffix
	model is used as the name of the model further in the program
	
	-c	display computation results on console
	-d	output computation results to an sqlite database
		by default the file is model.sqlite, can be changed using the --data switch
	-f	output computation results to a text file
		by default the file is model.out, can be changed using the --file switch
	-M	use an input mask for parametrization filtering
		by default the file is model.pbm, can be changed using the --min switch
	-m	output parametrizations as a mask
		by default the file is model.pbm, can be changed using the --mout switch
	-r	compute robustness of a time series
	-v 	verbose (output progress to console)
	-w	compute witnesses and store them in encoded form
	-W	compute witnesses and store them in explicit form
	
	--dist	used for distributed computation with two integers, denoting the I-th process out of N. Total - each of those tests only 1/N of the parametrization space.
