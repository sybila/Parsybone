/*
 * Copyright (C) 2012 - Adam Streck
 * This file is part of ParSyBoNe (Parameter Synthetizer for Boolean Networks) verification tool
 * ParSyBoNe is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License version 3.
 * ParSyBoNe is released without any warrany. See the GNU General Public License for more details. <http://www.gnu.org/licenses/>.
 * This software has been created as a part of a research conducted in the Systems Biology Laboratory of Masaryk University Brno. See http://sybila.fi.muni.cz/ .
 */

#ifndef PARSYBONE_TREE_NODE_INCLUDED
#define PARSYBONE_TREE_NODE_INCLUDED

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Nodes used for storing witness paths after synthesis - each node has its state number (of the product) and it stores its succesing nodes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../auxiliary/data_types.hpp"

class TreeNode {
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DATA
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::size_t my_state;
	std::vector<TreeNode> succesors;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// METHODS
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public:
	/**
	 * Constructor - constructed from a state number and vector of succesing node (might be empty)
	 */
	TreeNode(const std::size_t _state, std::vector<TreeNode> && _succesors = std::vector<TreeNode>()) 
		: my_state(_state), succesors(std::move(_succesors)) { }

	/**
	 * @return	state number in the product
	 */
	const std::size_t getState () const {
		return my_state;
	}

	/**
	 * @return	all succesing nodes
	 */ 
	const std::vector<TreeNode> & getSuccs() const {
		return succesors;
	}
};

#endif